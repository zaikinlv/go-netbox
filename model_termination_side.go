/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// TerminationSide the model 'TerminationSide'
type TerminationSide string

// List of Termination_side
const (
	TERMINATIONSIDE_A TerminationSide = "A"
	TERMINATIONSIDE_Z TerminationSide = "Z"
)

// All allowed values of TerminationSide enum
var AllowedTerminationSideEnumValues = []TerminationSide{
	"A",
	"Z",
}

func (v *TerminationSide) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TerminationSide(value)
	for _, existing := range AllowedTerminationSideEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TerminationSide", value)
}

// NewTerminationSideFromValue returns a pointer to a valid TerminationSide
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTerminationSideFromValue(v string) (*TerminationSide, error) {
	ev := TerminationSide(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TerminationSide: valid values are %v", v, AllowedTerminationSideEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TerminationSide) IsValid() bool {
	for _, existing := range AllowedTerminationSideEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Termination_side value
func (v TerminationSide) Ptr() *TerminationSide {
	return &v
}

type NullableTerminationSide struct {
	value *TerminationSide
	isSet bool
}

func (v NullableTerminationSide) Get() *TerminationSide {
	return v.value
}

func (v *NullableTerminationSide) Set(val *TerminationSide) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminationSide) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminationSide) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminationSide(val *TerminationSide) *NullableTerminationSide {
	return &NullableTerminationSide{value: val, isSet: true}
}

func (v NullableTerminationSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminationSide) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
