/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// InventoryItemStatusValue * `offline` - Offline * `active` - Active * `planned` - Planned * `staged` - Staged * `failed` - Failed * `decommissioning` - Decommissioning
type InventoryItemStatusValue string

// List of InventoryItem_status_value
const (
	INVENTORYITEMSTATUSVALUE_OFFLINE         InventoryItemStatusValue = "offline"
	INVENTORYITEMSTATUSVALUE_ACTIVE          InventoryItemStatusValue = "active"
	INVENTORYITEMSTATUSVALUE_PLANNED         InventoryItemStatusValue = "planned"
	INVENTORYITEMSTATUSVALUE_STAGED          InventoryItemStatusValue = "staged"
	INVENTORYITEMSTATUSVALUE_FAILED          InventoryItemStatusValue = "failed"
	INVENTORYITEMSTATUSVALUE_DECOMMISSIONING InventoryItemStatusValue = "decommissioning"
)

// All allowed values of InventoryItemStatusValue enum
var AllowedInventoryItemStatusValueEnumValues = []InventoryItemStatusValue{
	"offline",
	"active",
	"planned",
	"staged",
	"failed",
	"decommissioning",
}

func (v *InventoryItemStatusValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InventoryItemStatusValue(value)
	for _, existing := range AllowedInventoryItemStatusValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InventoryItemStatusValue", value)
}

// NewInventoryItemStatusValueFromValue returns a pointer to a valid InventoryItemStatusValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInventoryItemStatusValueFromValue(v string) (*InventoryItemStatusValue, error) {
	ev := InventoryItemStatusValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InventoryItemStatusValue: valid values are %v", v, AllowedInventoryItemStatusValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InventoryItemStatusValue) IsValid() bool {
	for _, existing := range AllowedInventoryItemStatusValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InventoryItem_status_value value
func (v InventoryItemStatusValue) Ptr() *InventoryItemStatusValue {
	return &v
}

type NullableInventoryItemStatusValue struct {
	value *InventoryItemStatusValue
	isSet bool
}

func (v NullableInventoryItemStatusValue) Get() *InventoryItemStatusValue {
	return v.value
}

func (v *NullableInventoryItemStatusValue) Set(val *InventoryItemStatusValue) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryItemStatusValue) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryItemStatusValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryItemStatusValue(val *InventoryItemStatusValue) *NullableInventoryItemStatusValue {
	return &NullableInventoryItemStatusValue{value: val, isSet: true}
}

func (v NullableInventoryItemStatusValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryItemStatusValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
