/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// ModuleTypeAirflowLabel the model 'ModuleTypeAirflowLabel'
type ModuleTypeAirflowLabel string

// List of ModuleType_airflow_label
const (
	MODULETYPEAIRFLOWLABEL_FRONT_TO_REAR ModuleTypeAirflowLabel = "Front to rear"
	MODULETYPEAIRFLOWLABEL_REAR_TO_FRONT ModuleTypeAirflowLabel = "Rear to front"
	MODULETYPEAIRFLOWLABEL_LEFT_TO_RIGHT ModuleTypeAirflowLabel = "Left to right"
	MODULETYPEAIRFLOWLABEL_RIGHT_TO_LEFT ModuleTypeAirflowLabel = "Right to left"
	MODULETYPEAIRFLOWLABEL_SIDE_TO_REAR  ModuleTypeAirflowLabel = "Side to rear"
	MODULETYPEAIRFLOWLABEL_PASSIVE       ModuleTypeAirflowLabel = "Passive"
)

// All allowed values of ModuleTypeAirflowLabel enum
var AllowedModuleTypeAirflowLabelEnumValues = []ModuleTypeAirflowLabel{
	"Front to rear",
	"Rear to front",
	"Left to right",
	"Right to left",
	"Side to rear",
	"Passive",
}

func (v *ModuleTypeAirflowLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModuleTypeAirflowLabel(value)
	for _, existing := range AllowedModuleTypeAirflowLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModuleTypeAirflowLabel", value)
}

// NewModuleTypeAirflowLabelFromValue returns a pointer to a valid ModuleTypeAirflowLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModuleTypeAirflowLabelFromValue(v string) (*ModuleTypeAirflowLabel, error) {
	ev := ModuleTypeAirflowLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModuleTypeAirflowLabel: valid values are %v", v, AllowedModuleTypeAirflowLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModuleTypeAirflowLabel) IsValid() bool {
	for _, existing := range AllowedModuleTypeAirflowLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModuleType_airflow_label value
func (v ModuleTypeAirflowLabel) Ptr() *ModuleTypeAirflowLabel {
	return &v
}

type NullableModuleTypeAirflowLabel struct {
	value *ModuleTypeAirflowLabel
	isSet bool
}

func (v NullableModuleTypeAirflowLabel) Get() *ModuleTypeAirflowLabel {
	return v.value
}

func (v *NullableModuleTypeAirflowLabel) Set(val *ModuleTypeAirflowLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableModuleTypeAirflowLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableModuleTypeAirflowLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModuleTypeAirflowLabel(val *ModuleTypeAirflowLabel) *NullableModuleTypeAirflowLabel {
	return &NullableModuleTypeAirflowLabel{value: val, isSet: true}
}

func (v NullableModuleTypeAirflowLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModuleTypeAirflowLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
