/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the BriefMACAddressRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BriefMACAddressRequest{}

// BriefMACAddressRequest Adds support for custom fields and tags.
type BriefMACAddressRequest struct {
	MacAddress           string  `json:"mac_address"`
	Description          *string `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BriefMACAddressRequest BriefMACAddressRequest

// NewBriefMACAddressRequest instantiates a new BriefMACAddressRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBriefMACAddressRequest(macAddress string) *BriefMACAddressRequest {
	this := BriefMACAddressRequest{}
	this.MacAddress = macAddress
	return &this
}

// NewBriefMACAddressRequestWithDefaults instantiates a new BriefMACAddressRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBriefMACAddressRequestWithDefaults() *BriefMACAddressRequest {
	this := BriefMACAddressRequest{}
	return &this
}

// GetMacAddress returns the MacAddress field value
func (o *BriefMACAddressRequest) GetMacAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value
// and a boolean to check if the value has been set.
func (o *BriefMACAddressRequest) GetMacAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MacAddress, true
}

// SetMacAddress sets field value
func (o *BriefMACAddressRequest) SetMacAddress(v string) {
	o.MacAddress = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BriefMACAddressRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BriefMACAddressRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BriefMACAddressRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BriefMACAddressRequest) SetDescription(v string) {
	o.Description = &v
}

func (o BriefMACAddressRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BriefMACAddressRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mac_address"] = o.MacAddress
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BriefMACAddressRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mac_address",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varBriefMACAddressRequest := _BriefMACAddressRequest{}

	err = json.Unmarshal(data, &varBriefMACAddressRequest)

	if err != nil {
		return err
	}

	*o = BriefMACAddressRequest(varBriefMACAddressRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mac_address")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBriefMACAddressRequest struct {
	value *BriefMACAddressRequest
	isSet bool
}

func (v NullableBriefMACAddressRequest) Get() *BriefMACAddressRequest {
	return v.value
}

func (v *NullableBriefMACAddressRequest) Set(val *BriefMACAddressRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBriefMACAddressRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBriefMACAddressRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBriefMACAddressRequest(val *BriefMACAddressRequest) *NullableBriefMACAddressRequest {
	return &NullableBriefMACAddressRequest{value: val, isSet: true}
}

func (v NullableBriefMACAddressRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBriefMACAddressRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
