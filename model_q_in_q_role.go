/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// QInQRole Customer/service VLAN designation (for Q-in-Q/IEEE 802.1ad)  * `svlan` - Service * `cvlan` - Customer
type QInQRole string

// List of Q_in_Q_role
const (
	QINQROLE_SVLAN QInQRole = "svlan"
	QINQROLE_CVLAN QInQRole = "cvlan"
	QINQROLE_EMPTY QInQRole = ""
)

// All allowed values of QInQRole enum
var AllowedQInQRoleEnumValues = []QInQRole{
	"svlan",
	"cvlan",
	"",
}

func (v *QInQRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QInQRole(value)
	for _, existing := range AllowedQInQRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QInQRole", value)
}

// NewQInQRoleFromValue returns a pointer to a valid QInQRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQInQRoleFromValue(v string) (*QInQRole, error) {
	ev := QInQRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QInQRole: valid values are %v", v, AllowedQInQRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QInQRole) IsValid() bool {
	for _, existing := range AllowedQInQRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Q_in_Q_role value
func (v QInQRole) Ptr() *QInQRole {
	return &v
}

type NullableQInQRole struct {
	value *QInQRole
	isSet bool
}

func (v NullableQInQRole) Get() *QInQRole {
	return v.value
}

func (v *NullableQInQRole) Set(val *QInQRole) {
	v.value = val
	v.isSet = true
}

func (v NullableQInQRole) IsSet() bool {
	return v.isSet
}

func (v *NullableQInQRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQInQRole(val *QInQRole) *NullableQInQRole {
	return &NullableQInQRole{value: val, isSet: true}
}

func (v NullableQInQRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQInQRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
