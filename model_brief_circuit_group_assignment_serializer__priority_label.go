/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// BriefCircuitGroupAssignmentSerializerPriorityLabel the model 'BriefCircuitGroupAssignmentSerializerPriorityLabel'
type BriefCircuitGroupAssignmentSerializerPriorityLabel string

// List of BriefCircuitGroupAssignmentSerializer__priority_label
const (
	BRIEFCIRCUITGROUPASSIGNMENTSERIALIZERPRIORITYLABEL_PRIMARY   BriefCircuitGroupAssignmentSerializerPriorityLabel = "Primary"
	BRIEFCIRCUITGROUPASSIGNMENTSERIALIZERPRIORITYLABEL_SECONDARY BriefCircuitGroupAssignmentSerializerPriorityLabel = "Secondary"
	BRIEFCIRCUITGROUPASSIGNMENTSERIALIZERPRIORITYLABEL_TERTIARY  BriefCircuitGroupAssignmentSerializerPriorityLabel = "Tertiary"
	BRIEFCIRCUITGROUPASSIGNMENTSERIALIZERPRIORITYLABEL_INACTIVE  BriefCircuitGroupAssignmentSerializerPriorityLabel = "Inactive"
)

// All allowed values of BriefCircuitGroupAssignmentSerializerPriorityLabel enum
var AllowedBriefCircuitGroupAssignmentSerializerPriorityLabelEnumValues = []BriefCircuitGroupAssignmentSerializerPriorityLabel{
	"Primary",
	"Secondary",
	"Tertiary",
	"Inactive",
}

func (v *BriefCircuitGroupAssignmentSerializerPriorityLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BriefCircuitGroupAssignmentSerializerPriorityLabel(value)
	for _, existing := range AllowedBriefCircuitGroupAssignmentSerializerPriorityLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BriefCircuitGroupAssignmentSerializerPriorityLabel", value)
}

// NewBriefCircuitGroupAssignmentSerializerPriorityLabelFromValue returns a pointer to a valid BriefCircuitGroupAssignmentSerializerPriorityLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBriefCircuitGroupAssignmentSerializerPriorityLabelFromValue(v string) (*BriefCircuitGroupAssignmentSerializerPriorityLabel, error) {
	ev := BriefCircuitGroupAssignmentSerializerPriorityLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BriefCircuitGroupAssignmentSerializerPriorityLabel: valid values are %v", v, AllowedBriefCircuitGroupAssignmentSerializerPriorityLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BriefCircuitGroupAssignmentSerializerPriorityLabel) IsValid() bool {
	for _, existing := range AllowedBriefCircuitGroupAssignmentSerializerPriorityLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BriefCircuitGroupAssignmentSerializer__priority_label value
func (v BriefCircuitGroupAssignmentSerializerPriorityLabel) Ptr() *BriefCircuitGroupAssignmentSerializerPriorityLabel {
	return &v
}

type NullableBriefCircuitGroupAssignmentSerializerPriorityLabel struct {
	value *BriefCircuitGroupAssignmentSerializerPriorityLabel
	isSet bool
}

func (v NullableBriefCircuitGroupAssignmentSerializerPriorityLabel) Get() *BriefCircuitGroupAssignmentSerializerPriorityLabel {
	return v.value
}

func (v *NullableBriefCircuitGroupAssignmentSerializerPriorityLabel) Set(val *BriefCircuitGroupAssignmentSerializerPriorityLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableBriefCircuitGroupAssignmentSerializerPriorityLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableBriefCircuitGroupAssignmentSerializerPriorityLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBriefCircuitGroupAssignmentSerializerPriorityLabel(val *BriefCircuitGroupAssignmentSerializerPriorityLabel) *NullableBriefCircuitGroupAssignmentSerializerPriorityLabel {
	return &NullableBriefCircuitGroupAssignmentSerializerPriorityLabel{value: val, isSet: true}
}

func (v NullableBriefCircuitGroupAssignmentSerializerPriorityLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBriefCircuitGroupAssignmentSerializerPriorityLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
