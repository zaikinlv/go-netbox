/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"time"
)

// checks if the PatchedNotificationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedNotificationRequest{}

// PatchedNotificationRequest Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type PatchedNotificationRequest struct {
	ObjectType           *string              `json:"object_type,omitempty"`
	ObjectId             *int64               `json:"object_id,omitempty"`
	User                 *BookmarkRequestUser `json:"user,omitempty"`
	Read                 NullableTime         `json:"read,omitempty"`
	EventType            *Event               `json:"event_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchedNotificationRequest PatchedNotificationRequest

// NewPatchedNotificationRequest instantiates a new PatchedNotificationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedNotificationRequest() *PatchedNotificationRequest {
	this := PatchedNotificationRequest{}
	return &this
}

// NewPatchedNotificationRequestWithDefaults instantiates a new PatchedNotificationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedNotificationRequestWithDefaults() *PatchedNotificationRequest {
	this := PatchedNotificationRequest{}
	return &this
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *PatchedNotificationRequest) GetObjectType() string {
	if o == nil || IsNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNotificationRequest) GetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *PatchedNotificationRequest) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *PatchedNotificationRequest) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *PatchedNotificationRequest) GetObjectId() int64 {
	if o == nil || IsNil(o.ObjectId) {
		var ret int64
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNotificationRequest) GetObjectIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ObjectId) {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *PatchedNotificationRequest) HasObjectId() bool {
	if o != nil && !IsNil(o.ObjectId) {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given int64 and assigns it to the ObjectId field.
func (o *PatchedNotificationRequest) SetObjectId(v int64) {
	o.ObjectId = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *PatchedNotificationRequest) GetUser() BookmarkRequestUser {
	if o == nil || IsNil(o.User) {
		var ret BookmarkRequestUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNotificationRequest) GetUserOk() (*BookmarkRequestUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *PatchedNotificationRequest) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given BookmarkRequestUser and assigns it to the User field.
func (o *PatchedNotificationRequest) SetUser(v BookmarkRequestUser) {
	o.User = &v
}

// GetRead returns the Read field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNotificationRequest) GetRead() time.Time {
	if o == nil || IsNil(o.Read.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Read.Get()
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNotificationRequest) GetReadOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Read.Get(), o.Read.IsSet()
}

// HasRead returns a boolean if a field has been set.
func (o *PatchedNotificationRequest) HasRead() bool {
	if o != nil && o.Read.IsSet() {
		return true
	}

	return false
}

// SetRead gets a reference to the given NullableTime and assigns it to the Read field.
func (o *PatchedNotificationRequest) SetRead(v time.Time) {
	o.Read.Set(&v)
}

// SetReadNil sets the value for Read to be an explicit nil
func (o *PatchedNotificationRequest) SetReadNil() {
	o.Read.Set(nil)
}

// UnsetRead ensures that no value is present for Read, not even an explicit nil
func (o *PatchedNotificationRequest) UnsetRead() {
	o.Read.Unset()
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *PatchedNotificationRequest) GetEventType() Event {
	if o == nil || IsNil(o.EventType) {
		var ret Event
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNotificationRequest) GetEventTypeOk() (*Event, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *PatchedNotificationRequest) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given Event and assigns it to the EventType field.
func (o *PatchedNotificationRequest) SetEventType(v Event) {
	o.EventType = &v
}

func (o PatchedNotificationRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedNotificationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectType) {
		toSerialize["object_type"] = o.ObjectType
	}
	if !IsNil(o.ObjectId) {
		toSerialize["object_id"] = o.ObjectId
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if o.Read.IsSet() {
		toSerialize["read"] = o.Read.Get()
	}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchedNotificationRequest) UnmarshalJSON(data []byte) (err error) {
	varPatchedNotificationRequest := _PatchedNotificationRequest{}

	err = json.Unmarshal(data, &varPatchedNotificationRequest)

	if err != nil {
		return err
	}

	*o = PatchedNotificationRequest(varPatchedNotificationRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "object_type")
		delete(additionalProperties, "object_id")
		delete(additionalProperties, "user")
		delete(additionalProperties, "read")
		delete(additionalProperties, "event_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchedNotificationRequest struct {
	value *PatchedNotificationRequest
	isSet bool
}

func (v NullablePatchedNotificationRequest) Get() *PatchedNotificationRequest {
	return v.value
}

func (v *NullablePatchedNotificationRequest) Set(val *PatchedNotificationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedNotificationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedNotificationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedNotificationRequest(val *PatchedNotificationRequest) *NullablePatchedNotificationRequest {
	return &NullablePatchedNotificationRequest{value: val, isSet: true}
}

func (v NullablePatchedNotificationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedNotificationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
