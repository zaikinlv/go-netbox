/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// ModuleRequestModuleType - struct for ModuleRequestModuleType
type ModuleRequestModuleType struct {
	BriefModuleTypeRequest *BriefModuleTypeRequest
	Int32                  *int32
}

// BriefModuleTypeRequestAsModuleRequestModuleType is a convenience function that returns BriefModuleTypeRequest wrapped in ModuleRequestModuleType
func BriefModuleTypeRequestAsModuleRequestModuleType(v *BriefModuleTypeRequest) ModuleRequestModuleType {
	return ModuleRequestModuleType{
		BriefModuleTypeRequest: v,
	}
}

// int32AsModuleRequestModuleType is a convenience function that returns int32 wrapped in ModuleRequestModuleType
func Int32AsModuleRequestModuleType(v *int32) ModuleRequestModuleType {
	return ModuleRequestModuleType{
		Int32: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ModuleRequestModuleType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BriefModuleTypeRequest
	err = newStrictDecoder(data).Decode(&dst.BriefModuleTypeRequest)
	if err == nil {
		jsonBriefModuleTypeRequest, _ := json.Marshal(dst.BriefModuleTypeRequest)
		if string(jsonBriefModuleTypeRequest) == "{}" { // empty struct
			dst.BriefModuleTypeRequest = nil
		} else {
			if err = validator.Validate(dst.BriefModuleTypeRequest); err != nil {
				dst.BriefModuleTypeRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.BriefModuleTypeRequest = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BriefModuleTypeRequest = nil
		dst.Int32 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ModuleRequestModuleType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ModuleRequestModuleType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ModuleRequestModuleType) MarshalJSON() ([]byte, error) {
	if src.BriefModuleTypeRequest != nil {
		return json.Marshal(&src.BriefModuleTypeRequest)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ModuleRequestModuleType) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BriefModuleTypeRequest != nil {
		return obj.BriefModuleTypeRequest
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	// all schemas are nil
	return nil
}

type NullableModuleRequestModuleType struct {
	value *ModuleRequestModuleType
	isSet bool
}

func (v NullableModuleRequestModuleType) Get() *ModuleRequestModuleType {
	return v.value
}

func (v *NullableModuleRequestModuleType) Set(val *ModuleRequestModuleType) {
	v.value = val
	v.isSet = true
}

func (v NullableModuleRequestModuleType) IsSet() bool {
	return v.isSet
}

func (v *NullableModuleRequestModuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModuleRequestModuleType(val *ModuleRequestModuleType) *NullableModuleRequestModuleType {
	return &NullableModuleRequestModuleType{value: val, isSet: true}
}

func (v NullableModuleRequestModuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModuleRequestModuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
