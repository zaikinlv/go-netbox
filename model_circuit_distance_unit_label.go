/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// CircuitDistanceUnitLabel the model 'CircuitDistanceUnitLabel'
type CircuitDistanceUnitLabel string

// List of Circuit_distance_unit_label
const (
	CIRCUITDISTANCEUNITLABEL_KILOMETERS CircuitDistanceUnitLabel = "Kilometers"
	CIRCUITDISTANCEUNITLABEL_METERS     CircuitDistanceUnitLabel = "Meters"
	CIRCUITDISTANCEUNITLABEL_MILES      CircuitDistanceUnitLabel = "Miles"
	CIRCUITDISTANCEUNITLABEL_FEET       CircuitDistanceUnitLabel = "Feet"
)

// All allowed values of CircuitDistanceUnitLabel enum
var AllowedCircuitDistanceUnitLabelEnumValues = []CircuitDistanceUnitLabel{
	"Kilometers",
	"Meters",
	"Miles",
	"Feet",
}

func (v *CircuitDistanceUnitLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CircuitDistanceUnitLabel(value)
	for _, existing := range AllowedCircuitDistanceUnitLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CircuitDistanceUnitLabel", value)
}

// NewCircuitDistanceUnitLabelFromValue returns a pointer to a valid CircuitDistanceUnitLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCircuitDistanceUnitLabelFromValue(v string) (*CircuitDistanceUnitLabel, error) {
	ev := CircuitDistanceUnitLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CircuitDistanceUnitLabel: valid values are %v", v, AllowedCircuitDistanceUnitLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CircuitDistanceUnitLabel) IsValid() bool {
	for _, existing := range AllowedCircuitDistanceUnitLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Circuit_distance_unit_label value
func (v CircuitDistanceUnitLabel) Ptr() *CircuitDistanceUnitLabel {
	return &v
}

type NullableCircuitDistanceUnitLabel struct {
	value *CircuitDistanceUnitLabel
	isSet bool
}

func (v NullableCircuitDistanceUnitLabel) Get() *CircuitDistanceUnitLabel {
	return v.value
}

func (v *NullableCircuitDistanceUnitLabel) Set(val *CircuitDistanceUnitLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableCircuitDistanceUnitLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableCircuitDistanceUnitLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircuitDistanceUnitLabel(val *CircuitDistanceUnitLabel) *NullableCircuitDistanceUnitLabel {
	return &NullableCircuitDistanceUnitLabel{value: val, isSet: true}
}

func (v NullableCircuitDistanceUnitLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircuitDistanceUnitLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
