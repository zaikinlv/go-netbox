/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// VirtualMachineWithConfigContextStatusLabel the model 'VirtualMachineWithConfigContextStatusLabel'
type VirtualMachineWithConfigContextStatusLabel string

// List of VirtualMachineWithConfigContext_status_label
const (
	VIRTUALMACHINEWITHCONFIGCONTEXTSTATUSLABEL_OFFLINE         VirtualMachineWithConfigContextStatusLabel = "Offline"
	VIRTUALMACHINEWITHCONFIGCONTEXTSTATUSLABEL_ACTIVE          VirtualMachineWithConfigContextStatusLabel = "Active"
	VIRTUALMACHINEWITHCONFIGCONTEXTSTATUSLABEL_PLANNED         VirtualMachineWithConfigContextStatusLabel = "Planned"
	VIRTUALMACHINEWITHCONFIGCONTEXTSTATUSLABEL_STAGED          VirtualMachineWithConfigContextStatusLabel = "Staged"
	VIRTUALMACHINEWITHCONFIGCONTEXTSTATUSLABEL_FAILED          VirtualMachineWithConfigContextStatusLabel = "Failed"
	VIRTUALMACHINEWITHCONFIGCONTEXTSTATUSLABEL_DECOMMISSIONING VirtualMachineWithConfigContextStatusLabel = "Decommissioning"
	VIRTUALMACHINEWITHCONFIGCONTEXTSTATUSLABEL_PAUSED          VirtualMachineWithConfigContextStatusLabel = "Paused"
)

// All allowed values of VirtualMachineWithConfigContextStatusLabel enum
var AllowedVirtualMachineWithConfigContextStatusLabelEnumValues = []VirtualMachineWithConfigContextStatusLabel{
	"Offline",
	"Active",
	"Planned",
	"Staged",
	"Failed",
	"Decommissioning",
	"Paused",
}

func (v *VirtualMachineWithConfigContextStatusLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualMachineWithConfigContextStatusLabel(value)
	for _, existing := range AllowedVirtualMachineWithConfigContextStatusLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualMachineWithConfigContextStatusLabel", value)
}

// NewVirtualMachineWithConfigContextStatusLabelFromValue returns a pointer to a valid VirtualMachineWithConfigContextStatusLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualMachineWithConfigContextStatusLabelFromValue(v string) (*VirtualMachineWithConfigContextStatusLabel, error) {
	ev := VirtualMachineWithConfigContextStatusLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualMachineWithConfigContextStatusLabel: valid values are %v", v, AllowedVirtualMachineWithConfigContextStatusLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualMachineWithConfigContextStatusLabel) IsValid() bool {
	for _, existing := range AllowedVirtualMachineWithConfigContextStatusLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualMachineWithConfigContext_status_label value
func (v VirtualMachineWithConfigContextStatusLabel) Ptr() *VirtualMachineWithConfigContextStatusLabel {
	return &v
}

type NullableVirtualMachineWithConfigContextStatusLabel struct {
	value *VirtualMachineWithConfigContextStatusLabel
	isSet bool
}

func (v NullableVirtualMachineWithConfigContextStatusLabel) Get() *VirtualMachineWithConfigContextStatusLabel {
	return v.value
}

func (v *NullableVirtualMachineWithConfigContextStatusLabel) Set(val *VirtualMachineWithConfigContextStatusLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMachineWithConfigContextStatusLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMachineWithConfigContextStatusLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMachineWithConfigContextStatusLabel(val *VirtualMachineWithConfigContextStatusLabel) *NullableVirtualMachineWithConfigContextStatusLabel {
	return &NullableVirtualMachineWithConfigContextStatusLabel{value: val, isSet: true}
}

func (v NullableVirtualMachineWithConfigContextStatusLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMachineWithConfigContextStatusLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
