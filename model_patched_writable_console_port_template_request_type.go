/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PatchedWritableConsolePortTemplateRequestType * `de-9` - DE-9 * `db-25` - DB-25 * `rj-11` - RJ-11 * `rj-12` - RJ-12 * `rj-45` - RJ-45 * `mini-din-8` - Mini-DIN 8 * `usb-a` - USB Type A * `usb-b` - USB Type B * `usb-c` - USB Type C * `usb-mini-a` - USB Mini A * `usb-mini-b` - USB Mini B * `usb-micro-a` - USB Micro A * `usb-micro-b` - USB Micro B * `usb-micro-ab` - USB Micro AB * `other` - Other
type PatchedWritableConsolePortTemplateRequestType string

// List of PatchedWritableConsolePortTemplateRequest_type
const (
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_DE_9         PatchedWritableConsolePortTemplateRequestType = "de-9"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_DB_25        PatchedWritableConsolePortTemplateRequestType = "db-25"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_RJ_11        PatchedWritableConsolePortTemplateRequestType = "rj-11"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_RJ_12        PatchedWritableConsolePortTemplateRequestType = "rj-12"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_RJ_45        PatchedWritableConsolePortTemplateRequestType = "rj-45"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_MINI_DIN_8   PatchedWritableConsolePortTemplateRequestType = "mini-din-8"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_USB_A        PatchedWritableConsolePortTemplateRequestType = "usb-a"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_USB_B        PatchedWritableConsolePortTemplateRequestType = "usb-b"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_USB_C        PatchedWritableConsolePortTemplateRequestType = "usb-c"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_USB_MINI_A   PatchedWritableConsolePortTemplateRequestType = "usb-mini-a"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_USB_MINI_B   PatchedWritableConsolePortTemplateRequestType = "usb-mini-b"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_USB_MICRO_A  PatchedWritableConsolePortTemplateRequestType = "usb-micro-a"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_USB_MICRO_B  PatchedWritableConsolePortTemplateRequestType = "usb-micro-b"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_USB_MICRO_AB PatchedWritableConsolePortTemplateRequestType = "usb-micro-ab"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_OTHER        PatchedWritableConsolePortTemplateRequestType = "other"
	PATCHEDWRITABLECONSOLEPORTTEMPLATEREQUESTTYPE_EMPTY        PatchedWritableConsolePortTemplateRequestType = ""
)

// All allowed values of PatchedWritableConsolePortTemplateRequestType enum
var AllowedPatchedWritableConsolePortTemplateRequestTypeEnumValues = []PatchedWritableConsolePortTemplateRequestType{
	"de-9",
	"db-25",
	"rj-11",
	"rj-12",
	"rj-45",
	"mini-din-8",
	"usb-a",
	"usb-b",
	"usb-c",
	"usb-mini-a",
	"usb-mini-b",
	"usb-micro-a",
	"usb-micro-b",
	"usb-micro-ab",
	"other",
	"",
}

func (v *PatchedWritableConsolePortTemplateRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedWritableConsolePortTemplateRequestType(value)
	for _, existing := range AllowedPatchedWritableConsolePortTemplateRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedWritableConsolePortTemplateRequestType", value)
}

// NewPatchedWritableConsolePortTemplateRequestTypeFromValue returns a pointer to a valid PatchedWritableConsolePortTemplateRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedWritableConsolePortTemplateRequestTypeFromValue(v string) (*PatchedWritableConsolePortTemplateRequestType, error) {
	ev := PatchedWritableConsolePortTemplateRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedWritableConsolePortTemplateRequestType: valid values are %v", v, AllowedPatchedWritableConsolePortTemplateRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedWritableConsolePortTemplateRequestType) IsValid() bool {
	for _, existing := range AllowedPatchedWritableConsolePortTemplateRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedWritableConsolePortTemplateRequest_type value
func (v PatchedWritableConsolePortTemplateRequestType) Ptr() *PatchedWritableConsolePortTemplateRequestType {
	return &v
}

type NullablePatchedWritableConsolePortTemplateRequestType struct {
	value *PatchedWritableConsolePortTemplateRequestType
	isSet bool
}

func (v NullablePatchedWritableConsolePortTemplateRequestType) Get() *PatchedWritableConsolePortTemplateRequestType {
	return v.value
}

func (v *NullablePatchedWritableConsolePortTemplateRequestType) Set(val *PatchedWritableConsolePortTemplateRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableConsolePortTemplateRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableConsolePortTemplateRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableConsolePortTemplateRequestType(val *PatchedWritableConsolePortTemplateRequestType) *NullablePatchedWritableConsolePortTemplateRequestType {
	return &NullablePatchedWritableConsolePortTemplateRequestType{value: val, isSet: true}
}

func (v NullablePatchedWritableConsolePortTemplateRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableConsolePortTemplateRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
