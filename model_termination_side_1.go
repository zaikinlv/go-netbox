/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// TerminationSide1 * `A` - A * `Z` - Z
type TerminationSide1 string

// List of Termination_side_1
const (
	TERMINATIONSIDE1_A TerminationSide1 = "A"
	TERMINATIONSIDE1_Z TerminationSide1 = "Z"
)

// All allowed values of TerminationSide1 enum
var AllowedTerminationSide1EnumValues = []TerminationSide1{
	"A",
	"Z",
}

func (v *TerminationSide1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TerminationSide1(value)
	for _, existing := range AllowedTerminationSide1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TerminationSide1", value)
}

// NewTerminationSide1FromValue returns a pointer to a valid TerminationSide1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTerminationSide1FromValue(v string) (*TerminationSide1, error) {
	ev := TerminationSide1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TerminationSide1: valid values are %v", v, AllowedTerminationSide1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TerminationSide1) IsValid() bool {
	for _, existing := range AllowedTerminationSide1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Termination_side_1 value
func (v TerminationSide1) Ptr() *TerminationSide1 {
	return &v
}

type NullableTerminationSide1 struct {
	value *TerminationSide1
	isSet bool
}

func (v NullableTerminationSide1) Get() *TerminationSide1 {
	return v.value
}

func (v *NullableTerminationSide1) Set(val *TerminationSide1) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminationSide1) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminationSide1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminationSide1(val *TerminationSide1) *NullableTerminationSide1 {
	return &NullableTerminationSide1{value: val, isSet: true}
}

func (v NullableTerminationSide1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminationSide1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
