/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// InventoryItemStatusLabel the model 'InventoryItemStatusLabel'
type InventoryItemStatusLabel string

// List of InventoryItem_status_label
const (
	INVENTORYITEMSTATUSLABEL_OFFLINE         InventoryItemStatusLabel = "Offline"
	INVENTORYITEMSTATUSLABEL_ACTIVE          InventoryItemStatusLabel = "Active"
	INVENTORYITEMSTATUSLABEL_PLANNED         InventoryItemStatusLabel = "Planned"
	INVENTORYITEMSTATUSLABEL_STAGED          InventoryItemStatusLabel = "Staged"
	INVENTORYITEMSTATUSLABEL_FAILED          InventoryItemStatusLabel = "Failed"
	INVENTORYITEMSTATUSLABEL_DECOMMISSIONING InventoryItemStatusLabel = "Decommissioning"
)

// All allowed values of InventoryItemStatusLabel enum
var AllowedInventoryItemStatusLabelEnumValues = []InventoryItemStatusLabel{
	"Offline",
	"Active",
	"Planned",
	"Staged",
	"Failed",
	"Decommissioning",
}

func (v *InventoryItemStatusLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InventoryItemStatusLabel(value)
	for _, existing := range AllowedInventoryItemStatusLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InventoryItemStatusLabel", value)
}

// NewInventoryItemStatusLabelFromValue returns a pointer to a valid InventoryItemStatusLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInventoryItemStatusLabelFromValue(v string) (*InventoryItemStatusLabel, error) {
	ev := InventoryItemStatusLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InventoryItemStatusLabel: valid values are %v", v, AllowedInventoryItemStatusLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InventoryItemStatusLabel) IsValid() bool {
	for _, existing := range AllowedInventoryItemStatusLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InventoryItem_status_label value
func (v InventoryItemStatusLabel) Ptr() *InventoryItemStatusLabel {
	return &v
}

type NullableInventoryItemStatusLabel struct {
	value *InventoryItemStatusLabel
	isSet bool
}

func (v NullableInventoryItemStatusLabel) Get() *InventoryItemStatusLabel {
	return v.value
}

func (v *NullableInventoryItemStatusLabel) Set(val *InventoryItemStatusLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryItemStatusLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryItemStatusLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryItemStatusLabel(val *InventoryItemStatusLabel) *NullableInventoryItemStatusLabel {
	return &NullableInventoryItemStatusLabel{value: val, isSet: true}
}

func (v NullableInventoryItemStatusLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryItemStatusLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
