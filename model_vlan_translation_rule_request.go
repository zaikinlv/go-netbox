/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the VLANTranslationRuleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VLANTranslationRuleRequest{}

// VLANTranslationRuleRequest Adds support for custom fields and tags.
type VLANTranslationRuleRequest struct {
	Policy int32 `json:"policy"`
	// Numeric VLAN ID (1-4094)
	LocalVid int32 `json:"local_vid"`
	// Numeric VLAN ID (1-4094)
	RemoteVid            int32   `json:"remote_vid"`
	Description          *string `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VLANTranslationRuleRequest VLANTranslationRuleRequest

// NewVLANTranslationRuleRequest instantiates a new VLANTranslationRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVLANTranslationRuleRequest(policy int32, localVid int32, remoteVid int32) *VLANTranslationRuleRequest {
	this := VLANTranslationRuleRequest{}
	this.Policy = policy
	this.LocalVid = localVid
	this.RemoteVid = remoteVid
	return &this
}

// NewVLANTranslationRuleRequestWithDefaults instantiates a new VLANTranslationRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVLANTranslationRuleRequestWithDefaults() *VLANTranslationRuleRequest {
	this := VLANTranslationRuleRequest{}
	return &this
}

// GetPolicy returns the Policy field value
func (o *VLANTranslationRuleRequest) GetPolicy() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
func (o *VLANTranslationRuleRequest) GetPolicyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Policy, true
}

// SetPolicy sets field value
func (o *VLANTranslationRuleRequest) SetPolicy(v int32) {
	o.Policy = v
}

// GetLocalVid returns the LocalVid field value
func (o *VLANTranslationRuleRequest) GetLocalVid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LocalVid
}

// GetLocalVidOk returns a tuple with the LocalVid field value
// and a boolean to check if the value has been set.
func (o *VLANTranslationRuleRequest) GetLocalVidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalVid, true
}

// SetLocalVid sets field value
func (o *VLANTranslationRuleRequest) SetLocalVid(v int32) {
	o.LocalVid = v
}

// GetRemoteVid returns the RemoteVid field value
func (o *VLANTranslationRuleRequest) GetRemoteVid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RemoteVid
}

// GetRemoteVidOk returns a tuple with the RemoteVid field value
// and a boolean to check if the value has been set.
func (o *VLANTranslationRuleRequest) GetRemoteVidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteVid, true
}

// SetRemoteVid sets field value
func (o *VLANTranslationRuleRequest) SetRemoteVid(v int32) {
	o.RemoteVid = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VLANTranslationRuleRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLANTranslationRuleRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VLANTranslationRuleRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VLANTranslationRuleRequest) SetDescription(v string) {
	o.Description = &v
}

func (o VLANTranslationRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VLANTranslationRuleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["policy"] = o.Policy
	toSerialize["local_vid"] = o.LocalVid
	toSerialize["remote_vid"] = o.RemoteVid
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VLANTranslationRuleRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"policy",
		"local_vid",
		"remote_vid",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varVLANTranslationRuleRequest := _VLANTranslationRuleRequest{}

	err = json.Unmarshal(data, &varVLANTranslationRuleRequest)

	if err != nil {
		return err
	}

	*o = VLANTranslationRuleRequest(varVLANTranslationRuleRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "policy")
		delete(additionalProperties, "local_vid")
		delete(additionalProperties, "remote_vid")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVLANTranslationRuleRequest struct {
	value *VLANTranslationRuleRequest
	isSet bool
}

func (v NullableVLANTranslationRuleRequest) Get() *VLANTranslationRuleRequest {
	return v.value
}

func (v *NullableVLANTranslationRuleRequest) Set(val *VLANTranslationRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVLANTranslationRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVLANTranslationRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVLANTranslationRuleRequest(val *VLANTranslationRuleRequest) *NullableVLANTranslationRuleRequest {
	return &NullableVLANTranslationRuleRequest{value: val, isSet: true}
}

func (v NullableVLANTranslationRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVLANTranslationRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
