/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// InventoryItemRequestRole - struct for InventoryItemRequestRole
type InventoryItemRequestRole struct {
	BriefInventoryItemRoleRequest *BriefInventoryItemRoleRequest
	Int32                         *int32
}

// BriefInventoryItemRoleRequestAsInventoryItemRequestRole is a convenience function that returns BriefInventoryItemRoleRequest wrapped in InventoryItemRequestRole
func BriefInventoryItemRoleRequestAsInventoryItemRequestRole(v *BriefInventoryItemRoleRequest) InventoryItemRequestRole {
	return InventoryItemRequestRole{
		BriefInventoryItemRoleRequest: v,
	}
}

// int32AsInventoryItemRequestRole is a convenience function that returns int32 wrapped in InventoryItemRequestRole
func Int32AsInventoryItemRequestRole(v *int32) InventoryItemRequestRole {
	return InventoryItemRequestRole{
		Int32: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *InventoryItemRequestRole) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into BriefInventoryItemRoleRequest
	err = newStrictDecoder(data).Decode(&dst.BriefInventoryItemRoleRequest)
	if err == nil {
		jsonBriefInventoryItemRoleRequest, _ := json.Marshal(dst.BriefInventoryItemRoleRequest)
		if string(jsonBriefInventoryItemRoleRequest) == "{}" { // empty struct
			dst.BriefInventoryItemRoleRequest = nil
		} else {
			if err = validator.Validate(dst.BriefInventoryItemRoleRequest); err != nil {
				dst.BriefInventoryItemRoleRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.BriefInventoryItemRoleRequest = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BriefInventoryItemRoleRequest = nil
		dst.Int32 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(InventoryItemRequestRole)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(InventoryItemRequestRole)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InventoryItemRequestRole) MarshalJSON() ([]byte, error) {
	if src.BriefInventoryItemRoleRequest != nil {
		return json.Marshal(&src.BriefInventoryItemRoleRequest)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *InventoryItemRequestRole) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BriefInventoryItemRoleRequest != nil {
		return obj.BriefInventoryItemRoleRequest
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	// all schemas are nil
	return nil
}

type NullableInventoryItemRequestRole struct {
	value *InventoryItemRequestRole
	isSet bool
}

func (v NullableInventoryItemRequestRole) Get() *InventoryItemRequestRole {
	return v.value
}

func (v *NullableInventoryItemRequestRole) Set(val *InventoryItemRequestRole) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryItemRequestRole) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryItemRequestRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryItemRequestRole(val *InventoryItemRequestRole) *NullableInventoryItemRequestRole {
	return &NullableInventoryItemRequestRole{value: val, isSet: true}
}

func (v NullableInventoryItemRequestRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryItemRequestRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
