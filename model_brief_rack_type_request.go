/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the BriefRackTypeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BriefRackTypeRequest{}

// BriefRackTypeRequest Adds support for custom fields and tags.
type BriefRackTypeRequest struct {
	Manufacturer         BriefDeviceTypeRequestManufacturer `json:"manufacturer"`
	Model                string                             `json:"model"`
	Slug                 string                             `json:"slug" validate:"regexp=^[-a-zA-Z0-9_]+$"`
	Description          *string                            `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BriefRackTypeRequest BriefRackTypeRequest

// NewBriefRackTypeRequest instantiates a new BriefRackTypeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBriefRackTypeRequest(manufacturer BriefDeviceTypeRequestManufacturer, model string, slug string) *BriefRackTypeRequest {
	this := BriefRackTypeRequest{}
	this.Manufacturer = manufacturer
	this.Model = model
	this.Slug = slug
	return &this
}

// NewBriefRackTypeRequestWithDefaults instantiates a new BriefRackTypeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBriefRackTypeRequestWithDefaults() *BriefRackTypeRequest {
	this := BriefRackTypeRequest{}
	return &this
}

// GetManufacturer returns the Manufacturer field value
func (o *BriefRackTypeRequest) GetManufacturer() BriefDeviceTypeRequestManufacturer {
	if o == nil {
		var ret BriefDeviceTypeRequestManufacturer
		return ret
	}

	return o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value
// and a boolean to check if the value has been set.
func (o *BriefRackTypeRequest) GetManufacturerOk() (*BriefDeviceTypeRequestManufacturer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Manufacturer, true
}

// SetManufacturer sets field value
func (o *BriefRackTypeRequest) SetManufacturer(v BriefDeviceTypeRequestManufacturer) {
	o.Manufacturer = v
}

// GetModel returns the Model field value
func (o *BriefRackTypeRequest) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *BriefRackTypeRequest) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *BriefRackTypeRequest) SetModel(v string) {
	o.Model = v
}

// GetSlug returns the Slug field value
func (o *BriefRackTypeRequest) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *BriefRackTypeRequest) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *BriefRackTypeRequest) SetSlug(v string) {
	o.Slug = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BriefRackTypeRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BriefRackTypeRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BriefRackTypeRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BriefRackTypeRequest) SetDescription(v string) {
	o.Description = &v
}

func (o BriefRackTypeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BriefRackTypeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["manufacturer"] = o.Manufacturer
	toSerialize["model"] = o.Model
	toSerialize["slug"] = o.Slug
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BriefRackTypeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"manufacturer",
		"model",
		"slug",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varBriefRackTypeRequest := _BriefRackTypeRequest{}

	err = json.Unmarshal(data, &varBriefRackTypeRequest)

	if err != nil {
		return err
	}

	*o = BriefRackTypeRequest(varBriefRackTypeRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "manufacturer")
		delete(additionalProperties, "model")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBriefRackTypeRequest struct {
	value *BriefRackTypeRequest
	isSet bool
}

func (v NullableBriefRackTypeRequest) Get() *BriefRackTypeRequest {
	return v.value
}

func (v *NullableBriefRackTypeRequest) Set(val *BriefRackTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBriefRackTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBriefRackTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBriefRackTypeRequest(val *BriefRackTypeRequest) *NullableBriefRackTypeRequest {
	return &NullableBriefRackTypeRequest{value: val, isSet: true}
}

func (v NullableBriefRackTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBriefRackTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
