/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// RackOuterUnitValue * `mm` - Millimeters * `in` - Inches
type RackOuterUnitValue string

// List of Rack_outer_unit_value
const (
	RACKOUTERUNITVALUE_MM    RackOuterUnitValue = "mm"
	RACKOUTERUNITVALUE_IN    RackOuterUnitValue = "in"
	RACKOUTERUNITVALUE_EMPTY RackOuterUnitValue = ""
)

// All allowed values of RackOuterUnitValue enum
var AllowedRackOuterUnitValueEnumValues = []RackOuterUnitValue{
	"mm",
	"in",
	"",
}

func (v *RackOuterUnitValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RackOuterUnitValue(value)
	for _, existing := range AllowedRackOuterUnitValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RackOuterUnitValue", value)
}

// NewRackOuterUnitValueFromValue returns a pointer to a valid RackOuterUnitValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRackOuterUnitValueFromValue(v string) (*RackOuterUnitValue, error) {
	ev := RackOuterUnitValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RackOuterUnitValue: valid values are %v", v, AllowedRackOuterUnitValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RackOuterUnitValue) IsValid() bool {
	for _, existing := range AllowedRackOuterUnitValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Rack_outer_unit_value value
func (v RackOuterUnitValue) Ptr() *RackOuterUnitValue {
	return &v
}

type NullableRackOuterUnitValue struct {
	value *RackOuterUnitValue
	isSet bool
}

func (v NullableRackOuterUnitValue) Get() *RackOuterUnitValue {
	return v.value
}

func (v *NullableRackOuterUnitValue) Set(val *RackOuterUnitValue) {
	v.value = val
	v.isSet = true
}

func (v NullableRackOuterUnitValue) IsSet() bool {
	return v.isSet
}

func (v *NullableRackOuterUnitValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRackOuterUnitValue(val *RackOuterUnitValue) *NullableRackOuterUnitValue {
	return &NullableRackOuterUnitValue{value: val, isSet: true}
}

func (v NullableRackOuterUnitValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRackOuterUnitValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
