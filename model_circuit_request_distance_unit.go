/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// CircuitRequestDistanceUnit * `km` - Kilometers * `m` - Meters * `mi` - Miles * `ft` - Feet
type CircuitRequestDistanceUnit string

// List of CircuitRequest_distance_unit
const (
	CIRCUITREQUESTDISTANCEUNIT_KM    CircuitRequestDistanceUnit = "km"
	CIRCUITREQUESTDISTANCEUNIT_M     CircuitRequestDistanceUnit = "m"
	CIRCUITREQUESTDISTANCEUNIT_MI    CircuitRequestDistanceUnit = "mi"
	CIRCUITREQUESTDISTANCEUNIT_FT    CircuitRequestDistanceUnit = "ft"
	CIRCUITREQUESTDISTANCEUNIT_EMPTY CircuitRequestDistanceUnit = ""
)

// All allowed values of CircuitRequestDistanceUnit enum
var AllowedCircuitRequestDistanceUnitEnumValues = []CircuitRequestDistanceUnit{
	"km",
	"m",
	"mi",
	"ft",
	"",
}

func (v *CircuitRequestDistanceUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CircuitRequestDistanceUnit(value)
	for _, existing := range AllowedCircuitRequestDistanceUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CircuitRequestDistanceUnit", value)
}

// NewCircuitRequestDistanceUnitFromValue returns a pointer to a valid CircuitRequestDistanceUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCircuitRequestDistanceUnitFromValue(v string) (*CircuitRequestDistanceUnit, error) {
	ev := CircuitRequestDistanceUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CircuitRequestDistanceUnit: valid values are %v", v, AllowedCircuitRequestDistanceUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CircuitRequestDistanceUnit) IsValid() bool {
	for _, existing := range AllowedCircuitRequestDistanceUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CircuitRequest_distance_unit value
func (v CircuitRequestDistanceUnit) Ptr() *CircuitRequestDistanceUnit {
	return &v
}

type NullableCircuitRequestDistanceUnit struct {
	value *CircuitRequestDistanceUnit
	isSet bool
}

func (v NullableCircuitRequestDistanceUnit) Get() *CircuitRequestDistanceUnit {
	return v.value
}

func (v *NullableCircuitRequestDistanceUnit) Set(val *CircuitRequestDistanceUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableCircuitRequestDistanceUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableCircuitRequestDistanceUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircuitRequestDistanceUnit(val *CircuitRequestDistanceUnit) *NullableCircuitRequestDistanceUnit {
	return &NullableCircuitRequestDistanceUnit{value: val, isSet: true}
}

func (v NullableCircuitRequestDistanceUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircuitRequestDistanceUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
