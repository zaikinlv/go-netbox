/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// CircuitRequestProviderAccount - struct for CircuitRequestProviderAccount
type CircuitRequestProviderAccount struct {
	BriefProviderAccountRequest *BriefProviderAccountRequest
	Int32                       *int32
}

// BriefProviderAccountRequestAsCircuitRequestProviderAccount is a convenience function that returns BriefProviderAccountRequest wrapped in CircuitRequestProviderAccount
func BriefProviderAccountRequestAsCircuitRequestProviderAccount(v *BriefProviderAccountRequest) CircuitRequestProviderAccount {
	return CircuitRequestProviderAccount{
		BriefProviderAccountRequest: v,
	}
}

// int32AsCircuitRequestProviderAccount is a convenience function that returns int32 wrapped in CircuitRequestProviderAccount
func Int32AsCircuitRequestProviderAccount(v *int32) CircuitRequestProviderAccount {
	return CircuitRequestProviderAccount{
		Int32: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CircuitRequestProviderAccount) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into BriefProviderAccountRequest
	err = newStrictDecoder(data).Decode(&dst.BriefProviderAccountRequest)
	if err == nil {
		jsonBriefProviderAccountRequest, _ := json.Marshal(dst.BriefProviderAccountRequest)
		if string(jsonBriefProviderAccountRequest) == "{}" { // empty struct
			dst.BriefProviderAccountRequest = nil
		} else {
			if err = validator.Validate(dst.BriefProviderAccountRequest); err != nil {
				dst.BriefProviderAccountRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.BriefProviderAccountRequest = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BriefProviderAccountRequest = nil
		dst.Int32 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CircuitRequestProviderAccount)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CircuitRequestProviderAccount)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CircuitRequestProviderAccount) MarshalJSON() ([]byte, error) {
	if src.BriefProviderAccountRequest != nil {
		return json.Marshal(&src.BriefProviderAccountRequest)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CircuitRequestProviderAccount) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BriefProviderAccountRequest != nil {
		return obj.BriefProviderAccountRequest
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	// all schemas are nil
	return nil
}

type NullableCircuitRequestProviderAccount struct {
	value *CircuitRequestProviderAccount
	isSet bool
}

func (v NullableCircuitRequestProviderAccount) Get() *CircuitRequestProviderAccount {
	return v.value
}

func (v *NullableCircuitRequestProviderAccount) Set(val *CircuitRequestProviderAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableCircuitRequestProviderAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableCircuitRequestProviderAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircuitRequestProviderAccount(val *CircuitRequestProviderAccount) *NullableCircuitRequestProviderAccount {
	return &NullableCircuitRequestProviderAccount{value: val, isSet: true}
}

func (v NullableCircuitRequestProviderAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircuitRequestProviderAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
