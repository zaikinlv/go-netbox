/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// ModuleTypeAirflowValue * `front-to-rear` - Front to rear * `rear-to-front` - Rear to front * `left-to-right` - Left to right * `right-to-left` - Right to left * `side-to-rear` - Side to rear * `passive` - Passive
type ModuleTypeAirflowValue string

// List of ModuleType_airflow_value
const (
	MODULETYPEAIRFLOWVALUE_FRONT_TO_REAR ModuleTypeAirflowValue = "front-to-rear"
	MODULETYPEAIRFLOWVALUE_REAR_TO_FRONT ModuleTypeAirflowValue = "rear-to-front"
	MODULETYPEAIRFLOWVALUE_LEFT_TO_RIGHT ModuleTypeAirflowValue = "left-to-right"
	MODULETYPEAIRFLOWVALUE_RIGHT_TO_LEFT ModuleTypeAirflowValue = "right-to-left"
	MODULETYPEAIRFLOWVALUE_SIDE_TO_REAR  ModuleTypeAirflowValue = "side-to-rear"
	MODULETYPEAIRFLOWVALUE_PASSIVE       ModuleTypeAirflowValue = "passive"
	MODULETYPEAIRFLOWVALUE_EMPTY         ModuleTypeAirflowValue = ""
)

// All allowed values of ModuleTypeAirflowValue enum
var AllowedModuleTypeAirflowValueEnumValues = []ModuleTypeAirflowValue{
	"front-to-rear",
	"rear-to-front",
	"left-to-right",
	"right-to-left",
	"side-to-rear",
	"passive",
	"",
}

func (v *ModuleTypeAirflowValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModuleTypeAirflowValue(value)
	for _, existing := range AllowedModuleTypeAirflowValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModuleTypeAirflowValue", value)
}

// NewModuleTypeAirflowValueFromValue returns a pointer to a valid ModuleTypeAirflowValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModuleTypeAirflowValueFromValue(v string) (*ModuleTypeAirflowValue, error) {
	ev := ModuleTypeAirflowValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModuleTypeAirflowValue: valid values are %v", v, AllowedModuleTypeAirflowValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModuleTypeAirflowValue) IsValid() bool {
	for _, existing := range AllowedModuleTypeAirflowValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModuleType_airflow_value value
func (v ModuleTypeAirflowValue) Ptr() *ModuleTypeAirflowValue {
	return &v
}

type NullableModuleTypeAirflowValue struct {
	value *ModuleTypeAirflowValue
	isSet bool
}

func (v NullableModuleTypeAirflowValue) Get() *ModuleTypeAirflowValue {
	return v.value
}

func (v *NullableModuleTypeAirflowValue) Set(val *ModuleTypeAirflowValue) {
	v.value = val
	v.isSet = true
}

func (v NullableModuleTypeAirflowValue) IsSet() bool {
	return v.isSet
}

func (v *NullableModuleTypeAirflowValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModuleTypeAirflowValue(val *ModuleTypeAirflowValue) *NullableModuleTypeAirflowValue {
	return &NullableModuleTypeAirflowValue{value: val, isSet: true}
}

func (v NullableModuleTypeAirflowValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModuleTypeAirflowValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
