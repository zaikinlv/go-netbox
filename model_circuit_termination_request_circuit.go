/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// CircuitTerminationRequestCircuit - struct for CircuitTerminationRequestCircuit
type CircuitTerminationRequestCircuit struct {
	BriefCircuitRequest *BriefCircuitRequest
	Int32               *int32
}

// BriefCircuitRequestAsCircuitTerminationRequestCircuit is a convenience function that returns BriefCircuitRequest wrapped in CircuitTerminationRequestCircuit
func BriefCircuitRequestAsCircuitTerminationRequestCircuit(v *BriefCircuitRequest) CircuitTerminationRequestCircuit {
	return CircuitTerminationRequestCircuit{
		BriefCircuitRequest: v,
	}
}

// int32AsCircuitTerminationRequestCircuit is a convenience function that returns int32 wrapped in CircuitTerminationRequestCircuit
func Int32AsCircuitTerminationRequestCircuit(v *int32) CircuitTerminationRequestCircuit {
	return CircuitTerminationRequestCircuit{
		Int32: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CircuitTerminationRequestCircuit) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BriefCircuitRequest
	err = newStrictDecoder(data).Decode(&dst.BriefCircuitRequest)
	if err == nil {
		jsonBriefCircuitRequest, _ := json.Marshal(dst.BriefCircuitRequest)
		if string(jsonBriefCircuitRequest) == "{}" { // empty struct
			dst.BriefCircuitRequest = nil
		} else {
			if err = validator.Validate(dst.BriefCircuitRequest); err != nil {
				dst.BriefCircuitRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.BriefCircuitRequest = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BriefCircuitRequest = nil
		dst.Int32 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CircuitTerminationRequestCircuit)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CircuitTerminationRequestCircuit)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CircuitTerminationRequestCircuit) MarshalJSON() ([]byte, error) {
	if src.BriefCircuitRequest != nil {
		return json.Marshal(&src.BriefCircuitRequest)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CircuitTerminationRequestCircuit) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BriefCircuitRequest != nil {
		return obj.BriefCircuitRequest
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	// all schemas are nil
	return nil
}

type NullableCircuitTerminationRequestCircuit struct {
	value *CircuitTerminationRequestCircuit
	isSet bool
}

func (v NullableCircuitTerminationRequestCircuit) Get() *CircuitTerminationRequestCircuit {
	return v.value
}

func (v *NullableCircuitTerminationRequestCircuit) Set(val *CircuitTerminationRequestCircuit) {
	v.value = val
	v.isSet = true
}

func (v NullableCircuitTerminationRequestCircuit) IsSet() bool {
	return v.isSet
}

func (v *NullableCircuitTerminationRequestCircuit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircuitTerminationRequestCircuit(val *CircuitTerminationRequestCircuit) *NullableCircuitTerminationRequestCircuit {
	return &NullableCircuitTerminationRequestCircuit{value: val, isSet: true}
}

func (v NullableCircuitTerminationRequestCircuit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircuitTerminationRequestCircuit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
