/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.6-Docker-3.2.0 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// CircuitDistanceUnitValue * `km` - Kilometers * `m` - Meters * `mi` - Miles * `ft` - Feet
type CircuitDistanceUnitValue string

// List of Circuit_distance_unit_value
const (
	CIRCUITDISTANCEUNITVALUE_KM    CircuitDistanceUnitValue = "km"
	CIRCUITDISTANCEUNITVALUE_M     CircuitDistanceUnitValue = "m"
	CIRCUITDISTANCEUNITVALUE_MI    CircuitDistanceUnitValue = "mi"
	CIRCUITDISTANCEUNITVALUE_FT    CircuitDistanceUnitValue = "ft"
	CIRCUITDISTANCEUNITVALUE_EMPTY CircuitDistanceUnitValue = ""
)

// All allowed values of CircuitDistanceUnitValue enum
var AllowedCircuitDistanceUnitValueEnumValues = []CircuitDistanceUnitValue{
	"km",
	"m",
	"mi",
	"ft",
	"",
}

func (v *CircuitDistanceUnitValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CircuitDistanceUnitValue(value)
	for _, existing := range AllowedCircuitDistanceUnitValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CircuitDistanceUnitValue", value)
}

// NewCircuitDistanceUnitValueFromValue returns a pointer to a valid CircuitDistanceUnitValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCircuitDistanceUnitValueFromValue(v string) (*CircuitDistanceUnitValue, error) {
	ev := CircuitDistanceUnitValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CircuitDistanceUnitValue: valid values are %v", v, AllowedCircuitDistanceUnitValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CircuitDistanceUnitValue) IsValid() bool {
	for _, existing := range AllowedCircuitDistanceUnitValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Circuit_distance_unit_value value
func (v CircuitDistanceUnitValue) Ptr() *CircuitDistanceUnitValue {
	return &v
}

type NullableCircuitDistanceUnitValue struct {
	value *CircuitDistanceUnitValue
	isSet bool
}

func (v NullableCircuitDistanceUnitValue) Get() *CircuitDistanceUnitValue {
	return v.value
}

func (v *NullableCircuitDistanceUnitValue) Set(val *CircuitDistanceUnitValue) {
	v.value = val
	v.isSet = true
}

func (v NullableCircuitDistanceUnitValue) IsSet() bool {
	return v.isSet
}

func (v *NullableCircuitDistanceUnitValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircuitDistanceUnitValue(val *CircuitDistanceUnitValue) *NullableCircuitDistanceUnitValue {
	return &NullableCircuitDistanceUnitValue{value: val, isSet: true}
}

func (v NullableCircuitDistanceUnitValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircuitDistanceUnitValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
